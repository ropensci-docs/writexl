[{"path":"https://docs.ropensci.org/writexl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Ooms. Author, maintainer. John McNamara. Copyright holder.            Author libxlsxwriter (see AUTHORS COPYRIGHT files details)","code":""},{"path":"https://docs.ropensci.org/writexl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ooms J (2024). writexl: Export Data Frames Excel 'xlsx' Format. R package version 1.5.0https://ropensci.r-universe.dev/writexl https://docs.ropensci.org/writexl/, https://ropensci.r-universe.dev/writexl https://docs.ropensci.org/writexl/.","code":"@Manual{,   title = {writexl: Export Data Frames to Excel 'xlsx' Format},   author = {Jeroen Ooms},   year = {2024},   note = {R package version 1.5.0https://ropensci.r-universe.dev/writexl https://docs.ropensci.org/writexl/},   url = {https://ropensci.r-universe.dev/writexl https://docs.ropensci.org/writexl/}, }"},{"path":"https://docs.ropensci.org/writexl/index.html","id":"writexl","dir":"","previous_headings":"","what":"Export Data Frames to Excel xlsx Format","title":"Export Data Frames to Excel xlsx Format","text":"Portable, light-weight data frame xlsx exporter based libxlsxwriter. Java Excel required. Wraps libxlsxwriter library create files Microsoft Excel ‘xlsx’ format.","code":""},{"path":"https://docs.ropensci.org/writexl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Export Data Frames to Excel xlsx Format","text":"","code":"install.packages(\"writexl\")"},{"path":"https://docs.ropensci.org/writexl/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Export Data Frames to Excel xlsx Format","text":"Currently package write_xlsx() export data frame xlsx. data types roundtrip readxl: Performance bit better openxlsx implementation: Also output xlsx files smaller:","code":"library(writexl) library(readxl) tmp <- writexl::write_xlsx(iris) readxl::read_xlsx(tmp) # A tibble: 150 x 5    Sepal.Length Sepal.Width Petal.Length Petal.Width Species           <dbl>       <dbl>        <dbl>       <dbl>   <chr>  1          5.1         3.5          1.4         0.2  setosa  2          4.9         3.0          1.4         0.2  setosa  3          4.7         3.2          1.3         0.2  setosa  4          4.6         3.1          1.5         0.2  setosa  5          5.0         3.6          1.4         0.2  setosa  6          5.4         3.9          1.7         0.4  setosa  7          4.6         3.4          1.4         0.3  setosa  8          5.0         3.4          1.5         0.2  setosa  9          4.4         2.9          1.4         0.2  setosa 10          4.9         3.1          1.5         0.1  setosa # ... with 140 more rows library(nycflights13) out <- readxl::read_xlsx(writexl::write_xlsx(flights)) all.equal(out, flights) ## TRUE library(microbenchmark) library(nycflights13) microbenchmark(   writexl = writexl::write_xlsx(flights, tempfile()),   openxlsx = openxlsx::write.xlsx(flights, tempfile()),   times = 5 ) ## Unit: seconds ##      expr       min        lq      mean    median        uq       max neval ##   writexl  8.884712  8.904431  9.103419  8.965643  9.041565  9.720743     5 ##  openxlsx 17.166818 18.072527 19.171003 18.669805 18.756661 23.189206     5 writexl::write_xlsx(flights, tmp1 <- tempfile()) file.info(tmp1)$size ## 29157282 openxlsx::write.xlsx(flights, tmp2 <- tempfile()) file.info(tmp2)$size ## 35962067"},{"path":"https://docs.ropensci.org/writexl/reference/write_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Export to xlsx — write_xlsx","title":"Export to xlsx — write_xlsx","text":"Writes data frame xlsx file. create xlsx (multiple) named sheets, simply set x named list data frames.","code":""},{"path":"https://docs.ropensci.org/writexl/reference/write_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export to xlsx — write_xlsx","text":"","code":"write_xlsx(   x,   path = tempfile(fileext = \".xlsx\"),   col_names = TRUE,   format_headers = TRUE,   use_zip64 = FALSE )"},{"path":"https://docs.ropensci.org/writexl/reference/write_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export to xlsx — write_xlsx","text":"x data frame named list data frames sheets xlsx path file name write col_names write column names top file? format_headers make col_names xlsx centered bold use_zip64 use zip64 enable support 4GB+ xlsx files. platforms can read .","code":""},{"path":"https://docs.ropensci.org/writexl/reference/write_xlsx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export to xlsx — write_xlsx","text":"Currently supports strings, numbers, booleans dates. Formatting options may added future versions.","code":""},{"path":"https://docs.ropensci.org/writexl/reference/write_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export to xlsx — write_xlsx","text":"","code":"# Roundtrip example with single excel sheet named 'mysheet' tmp <- write_xlsx(list(mysheet = iris)) readxl::read_xlsx(tmp) #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows"},{"path":"https://docs.ropensci.org/writexl/reference/writexl.html","id":null,"dir":"Reference","previous_headings":"","what":"Version — lxw_version","title":"Version — lxw_version","text":"Shows version bundled libxlsxwriter.","code":""},{"path":"https://docs.ropensci.org/writexl/reference/writexl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version — lxw_version","text":"","code":"lxw_version()"},{"path":"https://docs.ropensci.org/writexl/reference/xl_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Excel Types — xl_formula","title":"Excel Types — xl_formula","text":"Create special column types write spreadsheet","code":""},{"path":"https://docs.ropensci.org/writexl/reference/xl_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Excel Types — xl_formula","text":"","code":"xl_formula(x)  xl_hyperlink(url, name = NULL)"},{"path":"https://docs.ropensci.org/writexl/reference/xl_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Excel Types — xl_formula","text":"x character vector interpreted formula url character vector URLs name character vector friendly names","code":""},{"path":"https://docs.ropensci.org/writexl/reference/xl_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Excel Types — xl_formula","text":"","code":"df <- data.frame(   name = c(\"UCLA\", \"Berkeley\", \"Jeroen\"),   founded = c(1919, 1868, 2030),   website = xl_hyperlink(c(\"http://www.ucla.edu\", \"http://www.berkeley.edu\", NA), \"homepage\") ) df$age <- xl_formula('=(YEAR(TODAY()) - INDIRECT(\"B\" & ROW()))') write_xlsx(df, 'universities.xlsx')  # cleanup unlink('universities.xlsx')"}]
